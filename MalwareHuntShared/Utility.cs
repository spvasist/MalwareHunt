using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using MalwareHuntShared.Objects;
using MongoDB.Bson;
using Newtonsoft.Json;

namespace MalwareHuntShared
{
    public class Utility
    {
        public static string CreateSHA256(string input)
        {
            byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(input);
            return CreateSHA256(inputBytes);

        }
        public static string CreateSHA256(byte[] input)
        {
            using (SHA256 sha256 = SHA256.Create())
            {
                byte[] hashBytes = sha256.ComputeHash(input);

                // Convert the byte array to hexadecimal string
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < hashBytes.Length; i++)
                {
                    sb.Append(hashBytes[i].ToString("X2"));
                }
                return sb.ToString();
            }
        }

        public static string Serialize(Object obj)
        {
            var settings = new JsonSerializerSettings();
            settings.TypeNameHandling = TypeNameHandling.Objects;

            return Newtonsoft.Json.JsonConvert.SerializeObject(obj, Formatting.Indented, settings);
        }

        public static T Deserialize<T>(string json)
        {
            var settings = new JsonSerializerSettings();
            settings.TypeNameHandling = TypeNameHandling.Objects;

            return (T)Newtonsoft.Json.JsonConvert.DeserializeObject<T>(json, settings);
        }

        public static ActivityLevel GetLevel(int score)
        {
            if (score >= 512)
                return ActivityLevel.Blacklisted;
            if (score > 63)
                return ActivityLevel.High;
            if (score > 7)
                return ActivityLevel.Medium;
            if (score > 0)
                return ActivityLevel.Low;
            return ActivityLevel.None;
        }
        public static Bitmap GetScoreImage(int score)
        {
            return GetScoreImage(GetLevel(score));
        }
        public static Bitmap GetScoreImage(ActivityLevel level)
        {
            string path = @"D:\mtech-project\Code\Resources\";
            switch (level)
            {
                case ActivityLevel.Blacklisted:
                    return new Bitmap(path + "blacklist.png");
                case ActivityLevel.High:
                    return new Bitmap(path + "high.png");
                case ActivityLevel.Medium:
                    return new Bitmap(path + "medium.png");
                case ActivityLevel.Low:
                    return new Bitmap(path + "low.png");
                default:
                    return new Bitmap(path + "none.png");
            }
        }
    }

    public class ObjectIdConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            return objectType == typeof(ObjectId);
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType != JsonToken.String)
            {
                throw new Exception(String.Format("Unexpected token parsing ObjectId. Expected String, got {0}.", reader.TokenType));
            }

            var value = (string)reader.Value;
            return String.IsNullOrEmpty(value) ? ObjectId.Empty : new ObjectId(value);
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value is ObjectId)
            {
                var objectId = (ObjectId)value;
                writer.WriteValue(objectId != ObjectId.Empty ? objectId.ToString() : String.Empty);
            }
            else
            {
                throw new Exception("Expected ObjectId value.");
            }
        }
    }

    public class ListConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            return objectType == typeof(ObjectId);
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType != JsonToken.String)
            {
                throw new Exception(String.Format("Unexpected token parsing ObjectId. Expected String, got {0}.", reader.TokenType));
            }

            var value = (string)reader.Value;
            return String.IsNullOrEmpty(value) ? ObjectId.Empty : new ObjectId(value);
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value is ObjectId)
            {
                var objectId = (ObjectId)value;
                writer.WriteValue(objectId != ObjectId.Empty ? objectId.ToString() : String.Empty);
            }
            else
            {
                throw new Exception("Expected ObjectId value.");
            }
        }
    }
}
