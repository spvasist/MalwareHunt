using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using Newtonsoft.Json;

namespace MalwareHuntShared.Objects
{
    public class Machine : AbstractSystemDataObject
    {
        int m_black = 0, m_high = 0, m_medium = 0, m_low = 0;

        public string Name { get; set; }
        public string IP { get; set; }

        public string Mac { get; set; }

        public string OSName { get; set; }

        public string CurrentUser { get; set; }

        
        public int Score { get; set; }

        [JsonIgnore]
        public Bitmap ScoreImage
        {
            get
            {
                return Utility.GetScoreImage(Score);
            }
        }        

        public Score UpdateScore(List<Module> modulesList)
        {

            int score = 0;
            if (modulesList == null)
                return new Score();

            var blacklisted = modulesList.Where(o => o.LevelOfModuleActivity == ActivityLevel.Blacklisted);


            if (blacklisted != null && blacklisted.Count() > 0)
            {
                Debug.WriteLine("blacklisted");
                m_black = blacklisted.Count();
                score = 512;
                return new Score()
                {
                    ScoreValue = 512
                };
            }

            var high = modulesList.Where(o => o.LevelOfModuleActivity == ActivityLevel.High);
            if (high != null)
            {
                m_high = high.Count();
                if (m_high > 7) m_high = 7;
                score += m_high;
                score <<= 3;
            }
            var med = modulesList.Where(o => o.LevelOfModuleActivity == ActivityLevel.Medium);
            if (med != null)
            {
                m_medium = med.Count();
                if (m_medium > 7) m_medium = 7;
                score += m_medium;
                score <<= 3;
            }
            var low = modulesList.Where(o => o.LevelOfModuleActivity == ActivityLevel.Low);
            if (low != null)
            {
                m_low = low.Count();
                if (m_low > 7) m_low = 7;
                score += m_low;
            }
            Score = score;

            return new Score()
            {
                ScoreValue = score
            ,
                HighCount = m_high
            ,
                MediumCount = m_medium
            ,
                LowCount = m_low
            };

        }


    }
}
