using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using Newtonsoft.Json;

namespace MalwareHuntShared.Objects
{
    public class Machine : AbstractDataObject
    {
        int m_black = 0, m_high = 0, m_medium = 0, m_low = 0;

        public string Name { get; set; }
        public string IP { get; set; }

        public string Mac { get; set; }

        public string OSName { get; set; }

        public string CurrentUser { get; set; }

        int m_score = 0;
        public int Score
        {
            get
            {
                m_score = 0;
                if (Modules == null)
                    return m_score;

                var blacklisted = Modules.Where(o => o.LevelOfModuleActivity == ActivityLevel.Blacklisted);


                if (blacklisted != null && blacklisted.Count() > 0)
                {
                    Debug.WriteLine("blacklisted");
                    m_black = blacklisted.Count();
                    m_score = 512;
                    return m_score;
                }

                var high = Modules.Where(o => o.LevelOfModuleActivity == ActivityLevel.High);
                if (high != null)
                {
                    m_high = high.Count();
                    if (m_high > 7) m_high = 7;
                    m_score += m_high;
                    m_score <<= 3;
                }
                var med = Modules.Where(o => o.LevelOfModuleActivity == ActivityLevel.Medium);
                if (med != null)
                {
                    m_medium = med.Count();
                    if (m_medium > 7) m_medium = 7;
                    m_score += m_medium;
                    m_score <<= 3;
                }
                var low = Modules.Where(o => o.LevelOfModuleActivity == ActivityLevel.Low);
                if (low != null)
                {
                    m_low = low.Count();
                    if (m_low > 7) m_low = 7;
                    m_score += m_low;
                }
                return m_score;
            }
            set
            {
            }
        }

        [JsonIgnore]
        public Bitmap ScoreImage
        {
            get
            {
                string path = @"D:\mtech-project\Code\Resources\";
                Bitmap image = null;

                if (m_black > 0)
                    return new Bitmap(path + "blacklist.png");

                if (m_high > 0)
                    return new Bitmap(path + "high.png");

                if (m_medium > 0)
                    return new Bitmap(path + "medium.png");

                if (m_low > 0)
                    return new Bitmap(path + "low.png");

                return new Bitmap(path + "none.png");
            }
            set { }
        }

        List<Module> m_modules;
        public List<Module> Modules
        {
            get { return m_modules; }
            set
            {
                m_modules = value;
                int s = Score;
            }
        }


    }
}
