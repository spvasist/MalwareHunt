using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MalwareHuntShared;
using MalwareHuntShared.Objects;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using Newtonsoft.Json;

namespace MalwareHuntShared.Objects
{
    public class Module : AbstractDataObject
    {
        FileInfo m_info;

        int m_black = 0, m_high = 0, m_medium = 0, m_low = 0;

        public string Name
        {
            get
            {
                if (m_info != null)
                    return Path.GetFileName(m_info.Name);
                return "";
            }
            set { }
        }
        string m_sha256;
        public string HashSHA256
        {
            get
            {
                return m_sha256;
            }
            set { }
        }

        string m_path;
        public string FilePath
        {
            get
            {
                return m_path;
            }
            set
            {
                m_path = value;
                if (!string.IsNullOrEmpty(value))
                {
                    m_sha256 = Utility.CreateSHA256(m_path);
                    m_info = new FileInfo(m_path);
                }
            }
        }

        public DateTime CreationTime
        {
            get
            {
                if (m_info != null)
                    return m_info.CreationTime;
                return DateTime.MinValue;
            }
            set { }
        }

        public DateTime LastAccessTime
        {
            get
            {
                if (m_info != null)
                    return m_info.LastAccessTime;
                return DateTime.MinValue;
            }
        }

        public DateTime LastModifiedTime
        {
            get
            {
                if (m_info != null)
                    return m_info.LastWriteTime;
                return DateTime.MinValue;
            }
        }

        public List<AbstractActivity> Activities { get; set; } = new List<AbstractActivity>();
        int m_score = 0;
        public int Score
        {
            get
            {
                m_score = 0;
                if (Activities == null || Activities.Count == 0)
                {
                    return m_score;
                }

                var blacklisted = Activities.Where(o => o.LevelOfActivity == ActivityLevel.Blacklisted);
                m_black = blacklisted.Count();
                if (blacklisted != null && m_black > 0)
                { m_score = 512; return m_score; }

                var high = Activities.Where(o => o.LevelOfActivity == ActivityLevel.High);
                if (high != null)
                {
                    m_high = high.Count();
                    if (m_high > 7) m_high = 7;
                    m_score += m_high;
                    m_score <<= 3;
                }
                var med = Activities.Where(o => o.LevelOfActivity == ActivityLevel.Medium);
                if (med != null)
                {
                    m_medium = med.Count();
                    if (m_medium > 7) m_medium = 7;
                    m_score += m_medium;
                    m_score <<= 3;
                }
                var low = Activities.Where(o => o.LevelOfActivity == ActivityLevel.Low);
                if (low != null)
                {
                    m_low = low.Count();
                    if (m_low > 7) m_low = 7;
                    m_score += m_low;
                }
                return m_score;
            }
            set { }
        }

        [JsonIgnore]
        public Bitmap ScoreImage
        {
            get
            {
                string path = @"D:\mtech-project\Code\Resources\";
                Bitmap image = null;

                if (m_black > 0)
                    return new Bitmap(path + "blacklist.png");

                if (m_high > 0)
                    return new Bitmap(path + "high.png");

                if (m_medium > 0)
                    return new Bitmap(path + "medium.png");

                if (m_low > 0)
                    return new Bitmap(path + "low.png");

                return new Bitmap(path + "none.png");
            }
            set { }
        }

        [JsonIgnore]
        public ActivityLevel LevelOfModuleActivity
        {
            get
            {
                if (m_black > 0)
                    return ActivityLevel.Blacklisted;

                if (m_high > 0)
                    return ActivityLevel.High;

                if (m_medium > 0)
                    return ActivityLevel.Medium;

                if (m_low > 0)
                    return ActivityLevel.Low;
                return ActivityLevel.None;
            }
        }
        public Module() { }
        public Module(string fullpath)
        {
            FilePath = fullpath;
        }
    }
}
