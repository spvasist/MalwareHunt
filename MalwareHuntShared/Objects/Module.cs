using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MalwareHuntShared;
using MalwareHuntShared.Objects;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using Newtonsoft.Json;

namespace MalwareHuntShared.Objects
{
    public class Module : AbstractDataObject
    {
        FileInfo m_info;

        int m_black = 0, m_high = 0, m_medium = 0, m_low = 0;

        public string Name
        {
            get
            {
                if (m_info != null)
                    return Path.GetFileName(m_info.Name);
                return "";
            }
            set { }
        }

        public override string Identity
        {
            get
            {
                return SHA256;
            }
            set { }
        }
        string m_sha256;
        public string SHA256
        {
            get
            {
                if (!string.IsNullOrEmpty(m_path))
                {
                    m_sha256 = Utility.CreateSHA256(m_path);
                }
                return m_sha256;
            }
            set
            {
                m_sha256 = value;
            }
        }

        string m_path;
        public string FilePath
        {
            get
            {
                return m_path;
            }
            set
            {
                m_path = value;
                if (!string.IsNullOrEmpty(value))
                {
                    SHA256 = Utility.CreateSHA256(m_path);
                    m_info = new FileInfo(m_path);
                }
            }
        }

        public DateTime CreationTime
        {
            get
            {
                if (m_info != null)
                    return m_info.CreationTime;
                return DateTime.MinValue;
            }
            set { }
        }

        public DateTime LastAccessTime
        {
            get
            {
                if (m_info != null)
                    return m_info.LastAccessTime;
                return DateTime.MinValue;
            }
        }

        public DateTime LastModifiedTime
        {
            get
            {
                if (m_info != null)
                    return m_info.LastWriteTime;
                return DateTime.MinValue;
            }
        }

        public int Score { get; set; }

        [JsonIgnore]
        public Bitmap ScoreImage
        {
            get
            {
                return Utility.GetScoreImage(Score);
            }
        }

        [JsonIgnore]
        public ActivityLevel LevelOfModuleActivity
        {
            get
            {
                if (m_black > 0)
                    return ActivityLevel.Blacklisted;

                if (m_high > 0)
                    return ActivityLevel.High;

                if (m_medium > 0)
                    return ActivityLevel.Medium;

                if (m_low > 0)
                    return ActivityLevel.Low;
                return ActivityLevel.None;
            }
        }

        List<string> m_machineIDList = new List<string>();
        
        public List<string> MachineIDList
        {
            get
            {
                return m_machineIDList;
            }
            set
            {
                m_machineIDList = value;
            }
        }
        public Module() { }
        public Module(string fullpath)
        {
            FilePath = fullpath;
        }

        public int UpdateScore(List<AbstractActivity> activityList)
        {
            int score = 0;
            if (activityList == null || activityList.Count == 0)
            {
                return score;
            }

            var blacklisted = activityList.Where(o => o.LevelOfActivity == ActivityLevel.Blacklisted);
            m_black = blacklisted.Count();
            if (blacklisted != null && m_black > 0)
            { score = 512; return score; }

            var high = activityList.Where(o => o.LevelOfActivity == ActivityLevel.High);
            if (high != null)
            {
                m_high = high.Count();
                if (m_high > 7) m_high = 7;
                score += m_high;
                score <<= 3;
            }
            var med = activityList.Where(o => o.LevelOfActivity == ActivityLevel.Medium);
            if (med != null)
            {
                m_medium = med.Count();
                if (m_medium > 7) m_medium = 7;
                score += m_medium;
                score <<= 3;
            }
            var low = activityList.Where(o => o.LevelOfActivity == ActivityLevel.Low);
            if (low != null)
            {
                m_low = low.Count();
                if (m_low > 7) m_low = 7;
                score += m_low;
            }
            Score = score;
            return score;

        }
    }
}
