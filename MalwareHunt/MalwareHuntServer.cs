using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Management;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MalwareHuntServer;
using MalwareHuntServer.DataProviders;
using MalwareHuntShared.Objects;
using Newtonsoft.Json;

namespace MalwareHuntServer
{
    public partial class mainForm : Form
    {
        //ManagementEventWatcher processStartEvent = new ManagementEventWatcher("SELECT * FROM Win32_ProcessStartTrace");
        //ManagementEventWatcher processStopEvent = new ManagementEventWatcher("SELECT * FROM Win32_ProcessStopTrace");
        //ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from Win32_Process");

        List<Machine> macList = new List<Machine>();

        public mainForm()
        {
            InitializeComponent();

            if (!Directory.Exists(Program.SERVER_DATA_DIR))
            {
                Directory.CreateDirectory(Program.SERVER_DATA_DIR);
            }
            //MockData();
            Http.Start();
            DataCollector.Instance.Start();
            Analysis.AnalyticsEngine.Start();

            //machineBindingSource.DataSource = MachinesProvider.Instance.DataList;
            FileActivitiesProvider.Instance.Callback += GridRefreshFile;
            ModulesProvider.Instance.Callback += GridRefreshModule;
            MachinesProvider.Instance.Callback += GridRefreshMachine;
            //moduleBindingSource.DataSource = moduleBindingSource


            //var settings = new JsonSerializerSettings();
            //settings.TypeNameHandling = TypeNameHandling.Objects;

            //var ser  = Newtonsoft.Json.JsonConvert.SerializeObject(module,Formatting.Indented,settings);
            //var mod = Newtonsoft.Json.JsonConvert.DeserializeObject<Module>(ser,settings);
            //end

            //processStartEvent.EventArrived += new EventArrivedEventHandler(processStartEvent_EventArrived);
            //processStartEvent.Start();
            //processStopEvent.EventArrived += new EventArrivedEventHandler(processStopEvent_EventArrived);
            //processStopEvent.Start();
            //var obj = searcher.Get();
            //foreach (ManagementObject item in searcher.Get())
            //{

            //}

        }

        

        void GridRefreshFile(List<FileActivity> list)
        {
            if (dataGridView1.InvokeRequired)
                dataGridView1.Invoke((Action)(() => { GridRefreshFile(list); }));
            else
            {
                try
                {
                    list = list.OrderBy(o => o.LevelOfActivity).ToList();
                    abstractActivityBindingSource.DataSource = list;
                    dataGridView3.Update();
                    dataGridView3.Refresh();
                }
                catch { }
            }
        }

        void GridRefreshModule(List<Module> list)
        {
            if (dataGridView1.InvokeRequired)
                dataGridView1.Invoke((Action)(() => { GridRefreshModule(list); }));
            else
            {
                try
                {
                    list = list.OrderByDescending(o => o.Score).ToList();
                    moduleBindingSource.DataSource = list;
                    dataGridView2.Update();
                    dataGridView2.Refresh();
                }
                catch { }
            }
        }

        void GridRefreshMachine(List<Machine> list)
        {
            if (dataGridView1.InvokeRequired)
                dataGridView1.Invoke((Action)(() => { GridRefreshMachine(list); }));
            else
            {
                try
                {
                    list = list.OrderByDescending(o => o.Score).ToList();
                    machineBindingSource.DataSource = list;
                    dataGridView1.Update();
                    dataGridView1.Refresh();
                }
                catch { }
            }
        }

        private void fileSystemWatcher1_Changed(object sender, System.IO.FileSystemEventArgs e)
        {
        }

        private void fileSystemWatcher1_Renamed(object sender, System.IO.RenamedEventArgs e)
        {
        }

        void processStartEvent_EventArrived(object sender, EventArrivedEventArgs e)
        {
            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();
            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();

            Console.WriteLine("Process started. Name: " + processName + " | ID: " + processID);
        }

        void processStopEvent_EventArrived(object sender, EventArrivedEventArgs e)
        {
            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();
            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();

            Console.WriteLine("Process stopped. Name: " + processName + " | ID: " + processID);
        }

        private void dataGridView1_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {

        }        

        private void dataGridView1_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            //if (dataGridView1.Rows[e.RowIndex] != null)
            //{
            //    Machine currentObject = (Machine)dataGridView1.Rows[e.RowIndex].DataBoundItem;

            //    //if (currentObject != null)
            //    //    moduleBindingSource.DataSource = currentObject.Modules;
            //    dataGridView2.Invalidate(true);
            //    dataGridView1.Invalidate(true);
            //    dataGridView1.Update();
            //    dataGridView1.Refresh();
            //    dataGridView2.Update();
            //    dataGridView2.Refresh();
            //}
        }

        private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridView1_DataMemberChanged(object sender, EventArgs e)
        {
            //dataGridView1.Invalidate(true);

            //dataGridView1.Update();
            //dataGridView1.Refresh();
        }

        private void dataGridView2_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            //if (dataGridView2.Rows[e.RowIndex] != null)
            //{
            //    Module currentObject = (Module)dataGridView2.Rows[e.RowIndex].DataBoundItem;

            //    //if (currentObject != null)
            //    //    abstractActivityBindingSource.DataSource = currentObject.Activities;
            //    dataGridView3.Invalidate(true);
            //    dataGridView3.Update();
            //    dataGridView3.Refresh();
            //}
        }

        private void refreshToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //dataGridView1.DataSource = new List<Machine>();
            //dataGridView1.DataSource = macList;
            machineBindingSource.DataSource = MachinesProvider.Instance.DataList;
            dataGridView1.Update();
            dataGridView1.Refresh();
            //dataGridView2.Update();
            //dataGridView2.Refresh();
            //dataGridView3.Update();
            //dataGridView3.Refresh();
        }

        private void mainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            Program.s_cancelTokenSource.Cancel();
            Http.Stop();
        }
    }
}
