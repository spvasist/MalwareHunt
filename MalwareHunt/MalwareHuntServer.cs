using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Management;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MalwareHunt.Objects;
using MalwareHuntServer;
using MalwareHuntServer.DataProviders;
using MalwareHuntShared.Objects;
using Newtonsoft.Json;

namespace MalwareHunt
{
    public partial class mainForm : Form
    {
        ManagementEventWatcher processStartEvent = new ManagementEventWatcher("SELECT * FROM Win32_ProcessStartTrace");
        ManagementEventWatcher processStopEvent = new ManagementEventWatcher("SELECT * FROM Win32_ProcessStopTrace");
        ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from Win32_Process");
        
        public mainForm()
        {
            InitializeComponent();

            if(!Directory.Exists(Program.SERVER_DATA_DIR))
            {
                Directory.CreateDirectory(Program.SERVER_DATA_DIR);
            }

            MachinesProvider mProv = new MachinesProvider();
            //dataGridView1.Refresh();
            //var list =  mProv.GetAll();
            Http.Start();

            //machineBindingSource.DataSource = list;
            foreach (DataGridViewColumn column in dataGridView1.Columns)
                column.SortMode = DataGridViewColumnSortMode.Automatic;

            // start

            Module module = new Module() { Name = "m1", HashSHA256 = "256" };
            module.Activities.Add(new ProcessActivity() { LevelOfActivity = ActivityLevel.Medium});
            module.Activities.Add(new ProcessActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new ProcessActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new ProcessActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new FileActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new NetworkActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new NetworkActivity() { LevelOfActivity = ActivityLevel.Medium });

            var modCollection = DBManager.Instance.Database.GetCollection<Module>("modules");
            modCollection.InsertOne(module);

            var settings = new JsonSerializerSettings();
            settings.TypeNameHandling = TypeNameHandling.Objects;

            var ser  = Newtonsoft.Json.JsonConvert.SerializeObject(module,Formatting.Indented,settings);
            var mod = Newtonsoft.Json.JsonConvert.DeserializeObject<Module>(ser,settings);
            //end

            processStartEvent.EventArrived += new EventArrivedEventHandler(processStartEvent_EventArrived);
            processStartEvent.Start();
            processStopEvent.EventArrived += new EventArrivedEventHandler(processStopEvent_EventArrived);
            processStopEvent.Start();
            var obj = searcher.Get();
            foreach (ManagementObject item in searcher.Get())
            {
                
            }

            }

        private void fileSystemWatcher1_Changed(object sender, System.IO.FileSystemEventArgs e)
        {
        }

        private void fileSystemWatcher1_Renamed(object sender, System.IO.RenamedEventArgs e)
        {
        }

        void processStartEvent_EventArrived(object sender, EventArrivedEventArgs e)
        {
            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();
            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();

            Console.WriteLine("Process started. Name: " + processName + " | ID: " + processID);
        }

        void processStopEvent_EventArrived(object sender, EventArrivedEventArgs e)
        {
            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();
            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();

            Console.WriteLine("Process stopped. Name: " + processName + " | ID: " + processID);
        }

        private void dataGridView1_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            if(dataGridView1.Rows[e.RowIndex].Cells[2].Value.ToString() == "192.168.1.10")
            {
                dataGridView1.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.Red;
            }
            else
                dataGridView1.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.White;
        }
    }
}
