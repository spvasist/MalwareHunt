using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Management;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MalwareHuntServer;
using MalwareHuntServer.DataProviders;
using MalwareHuntShared.Objects;
using MongoDB.Driver;
using Newtonsoft.Json;

namespace MalwareHuntServer
{
    public partial class mainForm : Form
    {
        //ManagementEventWatcher processStartEvent = new ManagementEventWatcher("SELECT * FROM Win32_ProcessStartTrace");
        //ManagementEventWatcher processStopEvent = new ManagementEventWatcher("SELECT * FROM Win32_ProcessStopTrace");
        //ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from Win32_Process");

        List<Machine> macList = new List<Machine>();

        public mainForm()
        {
            InitializeComponent();

            if (!Directory.Exists(Program.SERVER_DATA_DIR))
            {
                Directory.CreateDirectory(Program.SERVER_DATA_DIR);
            }
            LoadChartPoints();
            comboBoxActType.SelectedIndex = 0;
            //MockData();
            Http.Start();
            DataCollector.Instance.Start();
            Analysis.AnalyticsEngine.Start();


            //GlobalActivityProvider.Callback += GridRefreshFile;
            //ModulesProvider.Instance.Callback += GridRefreshModule;
            //MachinesProvider.Instance.Callback += GridRefreshMachine;
            Analysis.AnalysisResult.Callback += AnalysisResult_Callback;

            //var settings = new JsonSerializerSettings();
            //settings.TypeNameHandling = TypeNameHandling.Objects;

            //var ser  = Newtonsoft.Json.JsonConvert.SerializeObject(module,Formatting.Indented,settings);
            //var mod = Newtonsoft.Json.JsonConvert.DeserializeObject<Module>(ser,settings);
            //end

            //processStartEvent.EventArrived += new EventArrivedEventHandler(processStartEvent_EventArrived);
            //processStartEvent.Start();
            //processStopEvent.EventArrived += new EventArrivedEventHandler(processStopEvent_EventArrived);
            //processStopEvent.Start();
            //var obj = searcher.Get();
            //foreach (ManagementObject item in searcher.Get())
            //{

            //}

        }

        private void AnalysisResult_Callback(Analysis.AnalysisResult result)
        {
            if (chart1.InvokeRequired)
                chart1.Invoke((Action)(() => { AnalysisResult_Callback(result); }));
            else
            {
                chart1.Series[0].Points.AddXY(result.AnalysisTime, result.MachineScore.HighCount);
                chart1.Series[1].Points.AddXY(result.AnalysisTime, result.MachineScore.MediumCount);
                chart1.Series[2].Points.AddXY(result.AnalysisTime, result.MachineScore.LowCount);
            }
        }

        void LoadChartPoints()
        {
            if (chart1.InvokeRequired)
                chart1.Invoke((Action)(() => { LoadChartPoints(); }));
            else
            {
                var time = Analysis.AnalysisResult.Results.Select(o => o.AnalysisTime).ToList();
                var high = Analysis.AnalysisResult.Results.Select(o => o.MachineScore.HighCount).ToList();
                var medium = Analysis.AnalysisResult.Results.Select(o => o.MachineScore.MediumCount).ToList();
                var low = Analysis.AnalysisResult.Results.Select(o => o.MachineScore.LowCount).ToList();
                for (int i = 0; i < time.Count(); i++)
                {
                    chart1.Series[0].Points.AddXY(time[i], high[i]);
                    chart1.Series[1].Points.AddXY(time[i], medium[i]);
                    chart1.Series[2].Points.AddXY(time[i], low[i]);
                }
            }
        }

        void GridRefreshActivity(List<AbstractActivity> list)
        {
            if (dataGridViewMachines.InvokeRequired)
                dataGridViewMachines.Invoke((Action)(() => { GridRefreshActivity(list); }));
            else
            {
                try
                {
                    if (comboBoxActType.SelectedIndex != 0)
                        list = list.Where(o => o.TypeOfActivity == (ActivityType)comboBoxActType.SelectedIndex).ToList();
                    list = list.OrderByDescending(o => o.LevelOfActivity).ToList();
                    abstractActivityBindingSource.DataSource = list;
                    dataGridViewActivities.Update();
                    dataGridViewActivities.Refresh();
                }
                catch { }
            }
        }

        void GridRefreshModule(List<Module> list)
        {
            if (dataGridViewMachines.InvokeRequired)
                dataGridViewMachines.Invoke((Action)(() => { GridRefreshModule(list); }));
            else
            {
                try
                {
                    list = list.OrderByDescending(o => o.Score).ToList();
                    moduleBindingSource.DataSource = list;
                    dataGridViewModules.Update();
                    dataGridViewModules.Refresh();
                }
                catch { }
            }
        }

        void GridRefreshMachine(List<Machine> list)
        {
            if (dataGridViewMachines.InvokeRequired)
                dataGridViewMachines.Invoke((Action)(() => { GridRefreshMachine(list); }));
            else
            {
                try
                {
                    list = list.OrderByDescending(o => o.Score).ToList();
                    machineBindingSource.DataSource = list;
                    dataGridViewMachines.Update();
                    dataGridViewMachines.Refresh();
                }
                catch { }
            }
        }

        void processStartEvent_EventArrived(object sender, EventArrivedEventArgs e)
        {
            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();
            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();

            Console.WriteLine("Process started. Name: " + processName + " | ID: " + processID);
        }

        void processStopEvent_EventArrived(object sender, EventArrivedEventArgs e)
        {
            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();
            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();

            Console.WriteLine("Process stopped. Name: " + processName + " | ID: " + processID);
        }

        

        private void refreshToolStripMenuItem_Click(object sender, EventArgs e)
        {
            GridRefreshMachine( MachinesProvider.Instance.DataList);
            GridRefreshModule(ModulesProvider.Instance.DataList);
            GridRefreshActivity(GlobalActivityProvider.DataList);
        }

        private void mainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            Program.s_cancelTokenSource.Cancel();
            Http.Stop();
        }

        private void comboBoxActType_SelectedIndexChanged(object sender, EventArgs e)
        {
            GridRefreshActivity(GlobalActivityProvider.DataList);
        }
    }
}
