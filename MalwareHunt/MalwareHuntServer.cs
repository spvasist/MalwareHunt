using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Management;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MalwareHuntServer;
using MalwareHuntServer.DataProviders;
using MalwareHuntShared.Objects;
using Newtonsoft.Json;

namespace MalwareHuntServer
{
    public partial class mainForm : Form
    {
        ManagementEventWatcher processStartEvent = new ManagementEventWatcher("SELECT * FROM Win32_ProcessStartTrace");
        ManagementEventWatcher processStopEvent = new ManagementEventWatcher("SELECT * FROM Win32_ProcessStopTrace");
        ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from Win32_Process");

        List<Machine> macList = new List<Machine>();

        public mainForm()
        {
            InitializeComponent();

            if(!Directory.Exists(Program.SERVER_DATA_DIR))
            {
                Directory.CreateDirectory(Program.SERVER_DATA_DIR);
            }
            MockData();
            Http.Start();
            DataCollector.Instance.Start();

            //machineBindingSource.DataSource = list;
            foreach (DataGridViewColumn column in dataGridView1.Columns)
                column.SortMode = DataGridViewColumnSortMode.Automatic;

            // start

            Module module = new Module() { Name = "m1", HashSHA256 = "256" };
            module.Activities.Add(new ProcessActivity() { LevelOfActivity = ActivityLevel.Medium});
            module.Activities.Add(new ProcessActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new ProcessActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new ProcessActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new FileActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new NetworkActivity() { LevelOfActivity = ActivityLevel.Medium });
            module.Activities.Add(new NetworkActivity() { LevelOfActivity = ActivityLevel.Medium });

            var modCollection = DBManager.Instance.Database.GetCollection<Module>("modules");
            modCollection.InsertOne(module);

            var settings = new JsonSerializerSettings();
            settings.TypeNameHandling = TypeNameHandling.Objects;

            var ser  = Newtonsoft.Json.JsonConvert.SerializeObject(module,Formatting.Indented,settings);
            var mod = Newtonsoft.Json.JsonConvert.DeserializeObject<Module>(ser,settings);
            //end

            processStartEvent.EventArrived += new EventArrivedEventHandler(processStartEvent_EventArrived);
            processStartEvent.Start();
            processStopEvent.EventArrived += new EventArrivedEventHandler(processStopEvent_EventArrived);
            processStopEvent.Start();
            var obj = searcher.Get();
            foreach (ManagementObject item in searcher.Get())
            {
                
            }

            }

        private void fileSystemWatcher1_Changed(object sender, System.IO.FileSystemEventArgs e)
        {
        }

        private void fileSystemWatcher1_Renamed(object sender, System.IO.RenamedEventArgs e)
        {
        }

        void processStartEvent_EventArrived(object sender, EventArrivedEventArgs e)
        {
            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();
            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();

            Console.WriteLine("Process started. Name: " + processName + " | ID: " + processID);
        }

        void processStopEvent_EventArrived(object sender, EventArrivedEventArgs e)
        {
            string processName = e.NewEvent.Properties["ProcessName"].Value.ToString();
            string processID = Convert.ToInt32(e.NewEvent.Properties["ProcessID"].Value).ToString();

            Console.WriteLine("Process stopped. Name: " + processName + " | ID: " + processID);
        }

        private void dataGridView1_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {

        }

        void MockData()
        {
            List<FileActivity> actListBlack = new List<FileActivity>();
            actListBlack.Add(new FileActivity() { LevelOfActivity = ActivityLevel.Blacklisted, OldFilePath = "c:\\s.txt" });

            List<FileActivity> actListHigh = new List<FileActivity>();
            actListHigh.Add(new FileActivity() { LevelOfActivity = ActivityLevel.High, OldFilePath = "c:\\s.txt" });
            actListHigh.Add(new FileActivity() { LevelOfActivity = ActivityLevel.High, OldFilePath = "c:\\s.txt" });
            actListHigh.Add(new FileActivity() { LevelOfActivity = ActivityLevel.High, OldFilePath = "c:\\s.txt" });
            actListHigh.Add(new FileActivity() { LevelOfActivity = ActivityLevel.High, OldFilePath = "c:\\s.txt" });
            actListHigh.Add(new FileActivity() { LevelOfActivity = ActivityLevel.High, OldFilePath = "c:\\s.txt" });

            List<FileActivity> actListMed = new List<FileActivity>();
            actListMed.Add(new FileActivity() { LevelOfActivity = ActivityLevel.Medium, OldFilePath = "c:\\s.txt" });
            actListMed.Add(new FileActivity() { LevelOfActivity = ActivityLevel.Medium, OldFilePath = "c:\\s.txt" });
            actListMed.Add(new FileActivity() { LevelOfActivity = ActivityLevel.Medium, OldFilePath = "c:\\s.txt" });

            List<FileActivity> actListlow = new List<FileActivity>();
            actListlow.Add(new FileActivity() { LevelOfActivity = ActivityLevel.Low, OldFilePath = "c:\\s.txt" });
            actListlow.Add(new FileActivity() { LevelOfActivity = ActivityLevel.Low, OldFilePath = "c:\\s.txt" });

            List<Module> modList1 = new List<Module>();
            modList1.Add(new Module() { Activities = actListBlack.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });
            modList1.Add(new Module() { Activities = actListHigh.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });
            modList1.Add(new Module() { Activities = actListHigh.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });
            modList1.Add(new Module() { Activities = actListMed.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });
            modList1.Add(new Module() { Activities = actListMed.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });
            modList1.Add(new Module() { Activities = actListlow.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });
            modList1.Add(new Module() { Activities = actListlow.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });
            modList1.Add(new Module() { Activities = actListlow.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });
            modList1.Add(new Module() { Activities = null, CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });
            modList1.Add(new Module() { Activities = null, CreationTime = DateTime.Now, Name = "s.txt", FilePath = "c:\\s.txt" });

            List<Module> modList2 = new List<Module>();
            modList2.Add(new Module() { Activities = actListHigh.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "p.txt", FilePath = "c:\\p.txt" });
            modList2.Add(new Module() { Activities = actListHigh.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "p.txt", FilePath = "c:\\p.txt" });
            modList2.Add(new Module() { Activities = actListHigh.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "p.txt", FilePath = "c:\\p.txt" });
            modList2.Add(new Module() { Activities = actListMed.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "p.txt", FilePath = "c:\\p.txt" });
            modList2.Add(new Module() { Activities = actListlow.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "p.txt", FilePath = "c:\\p.txt" });
            modList2.Add(new Module() { Activities = actListlow.Cast<AbstractActivity>().ToList(), CreationTime = DateTime.Now, Name = "p.txt", FilePath = "c:\\p.txt" });
            modList2.Add(new Module() { Activities = null, CreationTime = DateTime.Now, Name = "p.txt", FilePath = "c:\\p.txt" });
            modList2.Add(new Module() { Activities = null, CreationTime = DateTime.Now, Name = "p.txt", FilePath = "c:\\p.txt" });


            
            macList.Add(new Machine() { CurrentUser = "spv1", Name = "S-PC", IP = "192.168.1.120" ,Mac="12:21:31:ab:bc:cd",Modules = modList1});
            macList.Add(new Machine() { CurrentUser = "spv2", Name = "S-PC", IP = "192.168.1.121", Mac = "13:21:31:ab:bc:cd", Modules = modList2 });
            //machineBindingSource.DataSource = macList;
            dataGridView1.Refresh();
        }

        private void dataGridView1_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView1.Rows[e.RowIndex] != null)
            {
                Machine currentObject = (Machine)dataGridView1.Rows[e.RowIndex].DataBoundItem;
                
                if (currentObject != null)
                moduleBindingSource.DataSource = currentObject.Modules;
                dataGridView2.Invalidate(true);
                dataGridView1.Invalidate(true);
                dataGridView1.Update();
                dataGridView1.Refresh();
                dataGridView2.Update();
                dataGridView2.Refresh();
            }
        }

        private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            
        }

        private void dataGridView1_DataMemberChanged(object sender, EventArgs e)
        {
            dataGridView1.Invalidate(true);

            dataGridView1.Update();
            dataGridView1.Refresh();
        }

        private void dataGridView2_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView2.Rows[e.RowIndex] != null)
            {
                Module currentObject = (Module)dataGridView2.Rows[e.RowIndex].DataBoundItem;

                if (currentObject != null)
                    abstractActivityBindingSource.DataSource = currentObject.Activities;
                dataGridView3.Invalidate(true);
                dataGridView3.Update();
                dataGridView3.Refresh();
            }
        }

        private void refreshToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dataGridView1.DataSource = new List<Machine>();
            dataGridView1.DataSource = macList;
            dataGridView1.Update();
            dataGridView1.Refresh();
            dataGridView2.Update();
            dataGridView2.Refresh();
            dataGridView3.Update();
            dataGridView3.Refresh();
        }
    }
}
