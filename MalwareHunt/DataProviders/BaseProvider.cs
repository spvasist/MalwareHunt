using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using MalwareHuntShared.Objects;
using MongoDB.Bson;
using MongoDB.Driver;

namespace MalwareHuntServer.DataProviders
{
    public delegate void SyncCallback<T>(List<T> list);
    public abstract class BaseProvider<T, U> where T : BaseProvider<T, U>, new()
        where U : IDataObject, new()
    {
        public event SyncCallback<U> Callback;

        const int AUTO_REFRESH_WAIT = 5000;
        static T m_instance;
        protected object m_lock = new object();
        Thread m_syncThread;
        public virtual string CollectionName
        {
            get
            {
                throw new NotImplementedException();
            }
        }

        public static T Instance
        {
            get

            {
                if (m_instance == null)
                    m_instance = new T();
                return m_instance;
            }
        }

        public List<U> DataList { get; set; } = new List<U>();

        public BaseProvider()
        {
            m_syncThread = new Thread(RefreshData);
            m_syncThread.Start();
        }

        public virtual List<U> GetAll()
        {
            throw new NotImplementedException();
        }

        public virtual void ClearList()
        {

        }

        public void Refresh()
        {
            SyncData();
        }

        void RefreshData()
        {
            while (!Program.s_cancelTokenSource.IsCancellationRequested)
            {
                SyncData();
                Program.s_cancelTokenSource.Token.WaitHandle.WaitOne(AUTO_REFRESH_WAIT);
            }
        }

        public void SyncData()
        {
            lock (m_lock)
            {
                var collection = DBManager.Instance.Database.GetCollection<U>(CollectionName);
                DataList.Clear();
                var filter = Builders<U>.Filter.Empty;

                DataList = collection.FindSync<U>(filter).ToList<U>();
                Callback?.Invoke(DataList);
            }
        }
        public void UpdateData(U obj, bool overwrite = false)
        {
            UpdateData(new List<U>() { obj }, overwrite);
        }
        public void UpdateData(List<U> list, bool overwrite = false)
        {
            lock (m_lock)
            {
                List<U> newList = new List<U>();
                List<U> updateList = new List<U>();
                if (list == null || list.Count == 0)
                    return;

                var col = DBManager.Instance.Database.GetCollection<U>(CollectionName);

                foreach (var item in list)
                {
                    if (DataList.Contains(item))
                    {
                        updateList.Add(item);
                        if (overwrite)
                            col.ReplaceOne<U>(o => o.Identity == item.Identity, item);
                    }
                    else
                        newList.Add(item);
                }
                if (newList != null && newList.Count > 0)
                    col.InsertMany(newList);
            }
        }

    }
}
