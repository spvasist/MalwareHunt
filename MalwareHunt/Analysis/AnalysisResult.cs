using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MalwareHuntShared;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using MongoDB.Driver;
using Newtonsoft.Json;

namespace MalwareHuntServer.Analysis
{
    public delegate void AnalysisCallback(AnalysisResult result);
    public class AnalysisResult
    {
        const int SAVE_INTERVAL = 5000;
        static DateTime m_lastSave = DateTime.MinValue;
        static bool m_initialLoad = false;
        static List<AnalysisResult> m_results = new List<AnalysisResult>();
        public static event AnalysisCallback Callback;
        public static List<AnalysisResult> Results
        {
            get
            {
                if(!m_initialLoad)
                {
                    lock (m_lock)
                    {
                        try
                        {
                            var col = DBManager.Instance.Database.GetCollection<AnalysisResult>("analysis");
                            var filter = Builders<AnalysisResult>.Filter.Empty;
                            m_results = col.FindSync(filter).ToList();
                            m_initialLoad = true;
                        }
                        catch { }
                    }
                }
                return m_results;
            }

        }

        static List<AnalysisResult> m_deltaResults = new List<AnalysisResult>();
        static object m_lock = new object();
        ObjectId m_objectID = ObjectId.GenerateNewId();
        [BsonElement("_id")]
        [JsonConverter(typeof(ObjectIdConverter))]
        public ObjectId ID
        {
            get
            {
                return m_objectID;
            }
            set
            {
                m_objectID = value;
            }
        }

        DateTime m_analysisTime = DateTime.Now;
        public DateTime AnalysisTime
        {
            get
            {
                return m_analysisTime;
            }
            set
            {
                m_analysisTime = value;
            }
        }

        ObjectId m_machineID;
        [JsonConverter(typeof(ObjectIdConverter))]
        public ObjectId MachineID
        {
            get
            {
                return m_machineID;
            }
            set
            {
                m_machineID = value;
            }
        }

        public Score MachineScore { get; set; }

        public static void SaveAnalyticsResult(AnalysisResult result)
        {
            lock(m_lock)
            {
                m_deltaResults.Add(result);
                m_results.Add(result);
                if(DateTime.Now.Subtract(m_lastSave).TotalMilliseconds > SAVE_INTERVAL)
                {
                    var col =  DBManager.Instance.Database.GetCollection<AnalysisResult>("analysis");
                    col.InsertMany(m_deltaResults);
                    m_deltaResults.Clear();
                }
                Callback?.Invoke(result);
            }
        }

    }
}
