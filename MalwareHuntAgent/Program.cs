using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using MalwareHuntAgent.DataCapture;
using MalwareHuntShared.Objects;
using MalwareHuntShared;
using System.Net.Sockets;
using System.Net;
using System.Net.NetworkInformation;
using System.Configuration;
using Newtonsoft.Json;

namespace MalwareHuntAgent
{
    class Program
    {
        public static CancellationToken s_cancelToken = new CancellationToken();
        public const string DATA_DIR = @".\Data";
        public static string s_machineID;
        public static Machine s_machine;
        static void Main(string[] args)
        {
            if (Directory.Exists(DATA_DIR))
            {
                Directory.Delete(DATA_DIR, true);
            }
            Directory.CreateDirectory(DATA_DIR);

            //NetworkCapture.Capture();
            ModuleCapture.Instance.Start();
            FileCapture.Instance.Start();
            DataSender.Instance.Start();
            SendMachineInfo();
            while (!s_cancelToken.IsCancellationRequested) { s_cancelToken.WaitHandle.WaitOne(5000); }
        }

        public static void SendMachineInfo()
        {
            if (File.Exists("machineinfo"))
            {
                s_machine = Utility.Deserialize<Machine>(File.ReadAllText("machineinfo"));
            }

            {
                ObjectId id = ObjectId.GenerateNewId();
                if (s_machine != null)
                    id = s_machine.ID;

                s_machine = new Machine()
                {
                    CurrentUser = Environment.UserName,
                    ID = id,
                    IP = GetLocalIPAddress(),
                    Mac = GetMACAddress(),
                    Name = Environment.MachineName,
                    OSName = Environment.OSVersion.VersionString
                };
                var json = Utility.Serialize(s_machine);
                File.WriteAllText("machineinfo", json);
            }
            try
            {

                string hostname = ConfigurationManager.AppSettings["HOSTNAME"];
                int port = int.Parse(ConfigurationManager.AppSettings["PORT"]);

                HttpWebRequest request = (HttpWebRequest)WebRequest.CreateHttp(string.Format("http://{0}:{1}?machineid={2}&type={3}"
                    , hostname
                    , port
                    , s_machine.ID
                    , "info"));
                request.Method = "POST";
                var info = Utility.Serialize(s_machine);
                byte[] data = Encoding.ASCII.GetBytes(info);
                request.ContentLength = data.Length;

                Stream stream = request.GetRequestStream();
                stream.Write(data, 0, data.Length);
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    response.Close();
                }
            }
            catch (Exception ex) { }
        }



        public static string GetLocalIPAddress()
        {
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork)
                {
                    return ip.ToString();
                }
            }
            return "";
        }

        public static string GetMACAddress()
        {
            NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();
            String sMacAddress = string.Empty;
            foreach (NetworkInterface adapter in nics)
            {
                if (sMacAddress == String.Empty)// only return MAC Address from first card  
                {
                    //IPInterfaceProperties properties = adapter.GetIPProperties(); Line is not required
                    sMacAddress = adapter.GetPhysicalAddress().ToString();
                }
            }
            return sMacAddress;
        }
    }
}
