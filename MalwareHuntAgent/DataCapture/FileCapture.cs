using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using MalwareHuntShared;
using MalwareHuntShared.Objects;

namespace MalwareHuntAgent.DataCapture
{
    public class FileCapture : BaseDataCapture<FileActivity, FileCapture>
    {
        FileSystemWatcher s_watcher = new FileSystemWatcher(@"c:\");
        List<string> s_extList = new List<string>() { ".exe", ".dll" };
        public  void Start()
        {
            Capture();
        }
        public void Stop()
        {
        }
        void Capture()
        {
            s_watcher.IncludeSubdirectories = true;
            s_watcher.InternalBufferSize = 100 * 1024 * 1024;
            s_watcher.Changed += FileSystemChanged;
            s_watcher.Created += FileSystemChanged;
            s_watcher.Deleted += FileSystemChanged;
            s_watcher.Renamed += FileRenamed;
            s_watcher.EnableRaisingEvents = true;

        }

        private void FileRenamed(object sender, RenamedEventArgs e)
        {
            try
            {
                if (s_extList.Contains(Path.GetExtension(e.Name).ToLower()))
                {
                    LogActivity(e);
                }
            }
            catch { Logger.Log("Rename error"); }
        }

        private void FileSystemChanged(object sender, FileSystemEventArgs e)
        {
            if (s_extList.Contains(Path.GetExtension(e.Name).ToLower()))
            {
                LogActivity(e);   
            }
        }

        void LogActivity(FileSystemEventArgs e)
        {
            FileActivity activity = new FileActivity();
            activity.TypeOfFileActivity = (FileActivityType)e.ChangeType;
            activity.Path = e.FullPath;
            if (activity.TypeOfFileActivity == FileActivityType.Renamed)
                activity.OldFilePath = ((RenamedEventArgs)e).OldFullPath;
            if(!string.IsNullOrEmpty(activity.Path))
            {
                Module m= ModuleCapture.Instance.AddModule(activity.Path);
                if (m != null)
                    activity.ModuleIDList.Add(m.ID.ToString());
            }
            activity.MachineIDList.Add(Program.s_machine.ID.ToString());
            m_dataList.Add(activity);
        }
    }
}
